@page "/register"


@using System.ComponentModel.DataAnnotations
@using CrmService.PostgreDb
@using CrmService.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Radzen
@using Radzen.Blazor

@inject NavigationManager Nav
@inject IAuthService Auth
@inject NotificationService Noty
@inject HttpClient Http
@attribute [AllowAnonymous]

@rendermode InteractiveServer

<RadzenNotification/>
<div class="auth-wrapper">
    <div class="auth-card">

        <div class="auth-header">Регистрация нового пользователя</div>

        <EditForm Model="_m" style="padding:40px 140px 0px;" >
            <ValidationSummary />

            <RadzenTextBox @bind-Value="_m.Email"
                           Style="width:100%; margin-top:25px"
                           Placeholder="E-mail" />
            <ValidationMessage For="@(() => _m.Email)" />

            <RadzenTextBox @bind-Value="_m.Phone"
                           Style="width:100%; margin-top:18px"
                           Placeholder="Телефон (необязательно)" />

            <RadzenPassword @bind-Value="_m.Pass"
                            Style="width:100%; margin-top:18px"
                            Placeholder="Пароль" />
            <ValidationMessage For="@(() => _m.Pass)" />
                <RadzenStack Style="width:100%">
                <RadzenButton Text="Создать"
                              ButtonStyle="ButtonStyle.Primary"
                              Style="border-radius:45px;
                     width:max-content;          /* ширина = ширине контента */
                     display:block;              /* превращаем в блочный элемент */
                     margin:22px auto 0;         /* центрируем */
                     background-color:#A563FF;"
                              Click="HandleReg" />

                </RadzenStack>
        </EditForm>

        <div class="auth-footer">
            Уже есть аккаунт? <a href="/login">Войти</a>
        </div>

    </div>
</div>


<style>
    .auth-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
    }

    /* ── сама карточка ─────────────────────────────────────────── */
    .auth-card {
        background: #fbf9f9;
        border-radius: 45px;
        border: 1px solid #000; /* ● рамка 1 px чёрного цвета */
        box-shadow: 0 4px 20px rgba(0,0,0,.08);
        overflow: hidden;
    }

    .auth-header {
        background: #000;
        color: #fff;
        padding: 22px 30px;
        font-size: 15px;
        font-weight: 600;
        line-height: 1.3;
    }

    .auth-footer {
        text-align: center;
        font-size: 13px;
        padding: 18px 0 22px;
    }

        .auth-footer a {
            color: #9c4dff;
            text-decoration: none;
        }

    /* ── поля ввода (RadzenTextBox / RadzenPassword) ──────────── */
    input.rz-inputtext,
    .rz-password input {
        border: 1px solid #000 !important; /* ● рамка 1 px, чёрная */
        border-radius: 4px;
    }
</style>
@code {
    private readonly MM _m = new();

    private async Task HandleReg()
    {
        var (ok, err) = await Auth.RegisterAsync(_m.Email, _m.Phone, _m.Pass);
        if (ok) Nav.NavigateTo("/", true);
        else Noty.Notify(NotificationSeverity.Error, "Ошибка", err);
    }

    private class MM
    {
        [Required, EmailAddress] public string Email { get; set; } = "";
        public string? Phone { get; set; }
        [Required, MinLength(6)] public string Pass { get; set; } = "";
    }
}
