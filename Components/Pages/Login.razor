@page "/"
@using System.ComponentModel.DataAnnotations
@using CrmService.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using Radzen
@using Radzen.Blazor
@using CrmService.PostgreDb
@attribute [AllowAnonymous]
@rendermode InteractiveServer
@inject IAuthService Auth
@inject HttpClient Http
@inject NavigationManager Nav
@inject NotificationService Noty

<RadzenNotification />

<div class="auth-wrapper">
    <div class="auth-card">
        <div class="auth-header">
            Здравствуйте!<br />
            Давайте начнём работу. Для начала войдите в личный кабинет.
        </div>

        <EditForm Model="_m" OnValidSubmit="HandleLogin" style="padding:40px 140px 0;">
            <ValidationSummary />

            <RadzenTextBox @bind-Value="_m.Login"
                           Style="width:100%; margin-top:25px"
                           Placeholder="Введите e-mail или телефон" />
            <ValidationMessage For="@(() => _m.Login)" />

            <RadzenPassword @bind-Value="_m.Pass"
                            Style="width:100%; margin-top:18px"
                            Placeholder="Введите пароль" />
            <ValidationMessage For="@(() => _m.Pass)" />

            <RadzenButton Text="Войти"
                          ButtonStyle="ButtonStyle.Primary"
                          ButtonType="ButtonType.Submit"
                          Style="border-radius:45px;
                                 width:max-content;
                                 display:block;
                                 margin:22px auto 0;
                                 background-color:#A563FF;" />
        </EditForm>

        <div class="auth-footer">
            Нет аккаунта? <a href="/register">Регистрация</a>
        </div>
    </div>
</div>

<style>
    .auth-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
    }

    .auth-card {
        background: #fbf9f9;
        border-radius: 18px;
        box-shadow: 0 4px 20px rgba(0,0,0,.08);
        overflow: hidden;
    }

    .auth-header {
        background: #000;
        color: #fff;
        padding: 22px;
        font-size: 15px;
        font-weight: 600;
        line-height: 1.3;
    }

    .auth-footer {
        text-align: center;
        font-size: 13px;
        padding: 18px 0 22px;
    }

        .auth-footer a {
            color: #9c4dff;
            text-decoration: none;
        }

    input.rz-inputtext,
    .rz-password input {
        border: 1px solid #000 !important;
        border-radius: 4px;
    }
</style>

@code {
    private readonly M _m = new();

    private async Task HandleLogin()
    {
        var (ok, err) = await Auth.LoginAsync(_m.Login, _m.Pass);
        if (ok)
            Nav.NavigateTo("/home", true);           // на главную
        else
            Noty.Notify(NotificationSeverity.Error, "Ошибка", err);
    }

    private class M
    {
        [Required] public string Login { get; set; } = "";
        [Required] public string Pass { get; set; } = "";
    }
}
